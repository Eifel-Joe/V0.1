#####################################################################
#	Customized standard macros
#####################################################################
#
#        !!! Caution !!!
#
# PROBE_CALIBRATE can not dock the Magprobe automatically, as it 
# start's a scripting process we need to stop at the execution 
# of the base macro. Use 
#  - PROBE_ABORT
#  - PROBE_ACCEPT
# instead of the original ABORT and ACCEPT to also dock the probe
#
#####################################################################
#
# If your probe needs a Z move for attach/detach use either
#   G0 .... FORCE
#   G1 .... FORCE
#
#####################################################################
[gcode_macro G0]
description: Move gcode that prevents moves lower than the limit when probe attached
rename_existing: G0.1
gcode:
  ##### set manual override #####
  {% if 'FORCE' in params|upper %}
    {% set force = 1 %}
  {% else %}
    {% set force = 0 %}
  {% endif %}
  ##### get params #####
  {% set get_params = [] %}
  {% for key in params %}
    {% if key is not in ['G', 'FORCE'] %} ;G1/G0 is also seen as parameter
      {% set get_params = get_params.append(key + "=" + params[key])  %}
    {% endif %}
  {% endfor %}
  ##### add caller #####
  {% set tmp = get_params.append("CALLER=G0") %} ;hack to append list objects outside of a loop
  ##### add force #####
  {% set tmp = get_params.append("FORCE=" + force|string) %} ;hack to append list objects outside of a loop
  ##### end of definition #####
  {% if printer['gcode_macro _MAG_PROBE'].state|lower == 'unknown' and force == 0 %}
    _MAG_PROBE ACTION=GET_STATUS RESPOND=0
  {% endif %}
  _Z_MOVE_CHECK {get_params|join(" ")}

[gcode_macro G1]
description: Move gcode that prevents moves lower than the limit when probe attached
rename_existing: G1.1
gcode:
  ##### set manual override #####
  {% if 'FORCE' in params|upper %}
    {% set force = 1 %}
  {% else %}
    {% set force = 0 %}
  {% endif %}
  ##### get params #####
  {% set get_params = [] %}
  {% for key in params %}
    {% if key is not in ['G', 'FORCE'] %} ;G1/G0 is also seen as parameter
      {% set get_params = get_params.append(key + "=" + params[key])  %}
    {% endif %}
  {% endfor %}
  ##### add caller #####
  {% set tmp = get_params.append("CALLER=G1") %} ;hack to append list objects outside of a loop
  ##### add force #####
  {% set tmp = get_params.append("FORCE=" + force|string) %} ;hack to append list objects outside of a loop
  ##### end of definition #####
  {% if printer['gcode_macro _MAG_PROBE'].state|lower == 'unknown' and force == 0 %}
    _MAG_PROBE ACTION=GET_STATUS RESPOND=0
  {% endif %}
  _Z_MOVE_CHECK {get_params|join(" ")}
  
[gcode_macro _Z_MOVE_CHECK]
description: Helper: Check limit and perform move
gcode:
  ##### define defaults ######
  {% set caller = params.CALLER|default('G0')|upper %}
  {% set force = params.FORCE|default(0)|int %}
  ##### z values #####
  {% set z_min = printer['gcode_macro _USER_VARIABLE'].probe_z_min|float %}
  {% set z_act = printer.toolhead.position.z|float %}
  ##### MagProbe state #####
  {% set probe_state = printer['gcode_macro _MAG_PROBE'].state|lower %}
  ##### get params and prepare to send them to the base macro #####
  {% set get_params = [] %}
  {% for key in params %}
    {% if key is not in ['Z', 'CALLER', 'FORCE'] %}
      {% set get_params = get_params.append(key + params[key]) %}
    {% elif key is in ['Z'] %}
      {% if force == 1 %} ;manual override of probe check
        {% set get_params = get_params.append(key + params[key]) %}
      {% elif probe_state ==  'unknown' %}
        {action_raise_error("%s: MagProbe state %s run \"_MAG_PROBE ACTION=GET_STATUS\"" % (caller, probe_state|upper))}
      {% elif probe_state ==  'docked' %}
        {% set get_params = get_params.append(key + params[key]) %}
      {% elif probe_state ==  'attached' %}
        ##### define move target position depending on absolute_coordinates #####
        {% if printer.gcode_move.absolute_coordinates|lower == 'true' %}
          {% set z_target = params.Z|float %}
        {% else %}
          {% set z_target = z_act + params.Z|float %}
        {% endif %}
        ##### decide if a Z move can be executed #####
        {% if z_target > z_min or z_act < z_target %}
          {% set get_params = get_params.append(key + params[key]) %}              
        {% else %}
          {action_respond_info("%s: Z Moves lower than %.1fmm not allowed with installed probe" % (caller,z_min))}  
        {% endif %}
      {% else %}
        {action_raise_error("%s: MagProbe state %s not valid" % (caller, probe_state|upper))}
      {% endif %}
    {% endif %}
  {% endfor %}
  ##### end of definitions #####
  {caller}.1 {get_params|join(" ")}

[gcode_macro QUERY_PROBE]
description: Return the status of the z-probe and store ID
rename_existing: QUERY_PROBE_BASE
variable_id: 0
gcode:
  {% set id = params.ID|default(0) %} ; call id 0 means invalid
  QUERY_PROBE_BASE
  SET_GCODE_VARIABLE MACRO=QUERY_PROBE VARIABLE=id VALUE={id}

[gcode_macro PROBE_ACCURACY]
description: Probe Z-height accuracy at current XY position and dock/undock MagProbe
rename_existing: PROBE_ACCURACY_BASE
gcode:
  #####  get new parameter. #####
  {% set dock = params.DOCK|default(1)|int %} ; use DOCK=0 to omit the probe docking
  ##### get user defines  #####
  {% set z_min = printer['gcode_macro _USER_VARIABLE'].probe_z_min|float %}
  {% set t_speed = printer['gcode_macro _USER_VARIABLE'].probe_travel_speed|float * 60 %}
  ##### get toolhead parameters #####
  {% set act_z = printer.gcode_move.gcode_position.z|float %}
  {% set absolute_coordinates = printer.gcode_move.absolute_coordinates|lower %}
  ##### get params and prepare to send them to the base macro #####
  {% set get_params = [] %}
  {% for key in params %}
    {% set get_params = get_params.append(key + "=" + params[key])  %}
  {% endfor %}
  ##### end of definitions #####
  # as we need to return to the position with the probe we need to be at least at z_min
  G90 ; absolute positioning
  {% if act_z < z_min %}
    {action_respond_info("PROBE_ACCURACY: High must be above %.2f" % z_min)}
    G1 Z{z_min} F900 ; move head up
  {% endif %}
  M400 ; get the buffer cleared first
  SAVE_GCODE_STATE NAME=STATE_PROBE_ACCURACY
  ATTACH_PROBE
  RESTORE_GCODE_STATE NAME=STATE_PROBE_ACCURACY MOVE=1 MOVE_SPEED={t_speed}
  PROBE_ACCURACY_BASE {get_params|join(" ")}
  {% if dock == 1 %}
    DETACH_PROBE
    RESTORE_GCODE_STATE NAME=STATE_PROBE_ACCURACY MOVE=1 MOVE_SPEED={t_speed}
  {% endif %}
  {% if absolute_coordinates == 'false' %} G91 {% endif %}
  
[gcode_macro PROBE]
description: Probe Z-height at current XY position and dock/undock MagProbe
rename_existing: PROBE_BASE
gcode:
  #####  get new parameter. #####
  {% set dock = params.DOCK|default(1)|int %} ; use DOCK=0 to omit the probe docking
  ##### get user defines  #####
  {% set z_min = printer['gcode_macro _USER_VARIABLE'].probe_z_min|float %}
  {% set t_speed = printer['gcode_macro _USER_VARIABLE'].probe_travel_speed|float * 60 %}
  ##### get toolhead parameters #####
  {% set act_z = printer.gcode_move.gcode_position.z|float %}
  {% set absolute_coordinates = printer.gcode_move.absolute_coordinates|lower %}
  ##### get params and prepare to send them to the base macro #####
  {% set get_params = [] %}
  {% for key in params %}
    {% set get_params = get_params.append(key + "=" + params[key])  %}
  {% endfor %}
  ##### end of definitions #####
  # as we need to return to the position with the probe we need to be at least at z_min
  G90 ; absolute positioning
  {% if act_z < z_min %}
    {action_respond_info("PROBE: High must be above %.2f" % z_min)}
    G1 Z{z_min} F900 ; move head up
  {% endif %}
  M400 ; get the buffer cleared first
  SAVE_GCODE_STATE NAME=STATE_PROBE
  ATTACH_PROBE
  RESTORE_GCODE_STATE NAME=STATE_PROBE MOVE=1 MOVE_SPEED={t_speed}
  PROBE_BASE {get_params|join(" ")}
  G1 Z{z_min} F900 ; move head up to remove trigger
  {% if dock == 1 %}
    DETACH_PROBE
    RESTORE_GCODE_STATE NAME=STATE_PROBE MOVE=1 MOVE_SPEED={t_speed}
  {% endif %}
  {% if absolute_coordinates == 'false' %} G91 {% endif %}
  
[gcode_macro PROBE_CALIBRATE]
description: Calibrate the probes z_offset and undock MagProbe
rename_existing: PROBE_CALIBRATE_BASE
gcode:
  ##### get user defines  #####
  {% set z_min = printer['gcode_macro _USER_VARIABLE'].probe_z_min|float %}
  {% set t_speed = printer['gcode_macro _USER_VARIABLE'].probe_travel_speed|float * 60 %}
  ##### get toolhead parameters #####
  {% set act_z = printer.gcode_move.gcode_position.z|float %}
  {% set absolute_coordinates = printer.gcode_move.absolute_coordinates|lower %}
  ##### get params and prepare to send them to the base macro #####
  {% set get_params = [] %}
  {% for key in params %}
    {% set get_params = get_params.append(key + "=" + params[key])  %}
  {% endfor %}
  ##### end of definitions #####
  # as we need to return to the position with the probe we need to be at least at z_min
  G90 ; absolute positioning
  {% if act_z < z_min %}
    {action_respond_info("PROBE_CALIBRATE: High must be above %.2f" % z_min)}
    G1 Z{z_min} F900 ; move head up
  {% endif %}
  M400 ; get the buffer cleared first
  SAVE_GCODE_STATE NAME=STATE_PROBE_CALIBRATE
  ATTACH_PROBE
  RESTORE_GCODE_STATE NAME=STATE_PROBE_CALIBRATE MOVE=1 MOVE_SPEED={t_speed}
  SET_GCODE_VARIABLE MACRO=PROBE_ABORT VARIABLE=caller VALUE='"calib"'
  SET_GCODE_VARIABLE MACRO=PROBE_ABORT VARIABLE=absolute_coordinates VALUE='"{absolute_coordinates}"'
  PROBE_CALIBRATE_BASE {get_params|join(" ")}
  
[gcode_macro BED_MESH_CALIBRATE]
description: Perform QGL and bed mesh leveling
rename_existing: BED_MESH_CALIBRATE_BASE
gcode:
  ##### get params and prepare to send them to the base macro #####
  {% set get_params = [] %}
  {% for key in params %}
    {% set get_params = get_params.append(key + "=" + params[key])  %}
  {% endfor %}
 ##### end of definitions #####
  _CG28
  BED_MESH_CLEAR
  ## check if QGL was already executed
  {% if printer.quad_gantry_level.applied|lower == 'false' %}
    QUAD_GANTRY_LEVEL PARK=false
  {% endif %}
  ATTACH_PROBE
  BED_MESH_CALIBRATE_BASE {get_params|join(" ")}
  DETACH_PROBE

[gcode_macro PROBE_ABORT]
description: Abort manual Z probing tool for Probe and dock MagProbe
variable_caller: 'unknown'
variable_absolute_coordinates: False
gcode:
  ##### get user defines  #####
  {% set t_speed = printer['gcode_macro _USER_VARIABLE'].probe_travel_speed|float * 60 %}
  ##### end of definitions #####
  {% if caller|lower|string == 'calib' %}
    ABORT
    DETACH_PROBE
    RESTORE_GCODE_STATE NAME=STATE_PROBE_CALIBRATE MOVE=1 MOVE_SPEED={t_speed}
    {% if absolute_coordinates == 'false' %} G91 {% endif %}
      SET_GCODE_VARIABLE MACRO=PROBE_ABORT VARIABLE=caller VALUE='"unknown"'
  {% else %}
    {action_respond_info("PROBE_ABORT: Executed while PROBE_CALIBRATE is not running")}
  {% endif %}

[gcode_macro PROBE_ACCEPT]
description: Accept the current Z position for Probe and dock MagProbe
gcode:
  #####  get variables from ABORT  #####
  {% set caller = printer['gcode_macro PROBE_ABORT'].caller %}
  {% set absolute_coordinates = printer['gcode_macro PROBE_ABORT'].absolute_coordinates %}
  ##### get user defines  #####
  {% set t_speed = printer['gcode_macro _USER_VARIABLE'].probe_travel_speed|float * 60 %}
  ##### end of definitions #####
  {% if caller|lower|string == 'calib' %}
    ACCEPT
    DETACH_PROBE
    RESTORE_GCODE_STATE NAME=STATE_PROBE_CALIBRATE MOVE=1 MOVE_SPEED={t_speed}
    {% if absolute_coordinates == 'false' %} G91 {% endif %}
      SET_GCODE_VARIABLE MACRO=PROBE_ABORT VARIABLE=caller VALUE='"unknown"'
  {% else %}
    {action_respond_info("PROBE_ACCEPT: Executed while PROBE_CALIBRATE is not running")}
  {% endif %}
